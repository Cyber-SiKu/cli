/*
 *  Copyright (c) 2021 NetEase Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax="proto2";

package curvefs.mds;
option cc_generic_services = true;
option go_package = "curvefs/mds";

enum FSStatusCode {
    OK = 0;
    UNKNOWN_ERROR = 1;
    FS_EXIST = 2;
    NOT_FOUND = 3;
    PARAM_ERROR = 4;
    MOUNT_POINT_EXIST = 5;
    MOUNT_POINT_NOT_EXIST = 6;
    RPC_ERROR = 7;
    INIT_SPACE_ERROR = 8;
    UNINIT_SPACE_ERROR = 9;
    FS_BUSY = 10;
    INSERT_ROOT_INODE_ERROR = 11;
    UNDER_DELETING = 12;
    NOT_INITED = 13;
    DELETE_INODE_ERROR = 14;
    METASERVER_CLIENT_NOT_INITED = 15;
    FS_ID_MISMATCH = 16;
    SPACE_CLIENT_NOT_INITED = 17;
    INODE_EXIST = 18;
    INTERNAL_ERROR = 19;
    STORAGE_ERROR = 20;
    ALLOCATE_CHUNKID_ERROR = 21;
    CREATE_PARTITION_ERROR = 22;
    CREATE_COPYSET_ERROR = 23;
    GET_PARTITIONINFOOFFS_ERROR = 24;
    PARTITION_EXIST = 25;
    DELETE_PARTITION_ERROR = 26;
    S3_INFO_ERROR = 27;
}

enum FsStatus {
    NEW = 0;
    INITED = 1;
    DELETING = 2;
}

enum FSType {
    TYPE_VOLUME = 1;
    TYPE_S3 = 2;
}

// bitmap location for each block group
enum BitmapLocation {
    AtStart = 1;
    AtEnd = 2;
}

message Volume {
    required uint64 volumeSize = 1;
    required uint64 blockSize = 2;
    required string volumeName = 3;
    required string user = 4;
    optional string password = 5;
    required uint64 blockGroupSize = 6;
    required BitmapLocation bitmapLocation = 7;

    // TODO(all): maybe we need curvebs cluster's mds ip and port in here
}

message S3Info {
    required string ak = 1;
    required string sk = 2;
    required string endpoint = 3;
    required string bucketname = 4;
    required uint64 blockSize = 5;
    required uint64 chunkSize = 6;
}

message FsDetail {
    oneof FsDetailOneOf {
        Volume volume = 1;
        S3Info s3Info = 2;
    }
}

message FsInfo {
    required uint32 fsId = 1;
    required string fsName = 2;
    required FsStatus status = 3;
    required uint64 rootInodeId = 4;
    required uint64 capacity = 5;
    required uint64 blockSize = 6;
    required uint32 mountNum = 7;
    repeated string mountpoints = 8;
    required FSType fsType = 9;
    required FsDetail detail = 10;
    required bool enableSumInDir = 11;
}

message ListClusterFsInfoRequest {
}

message ListClusterFsInfoResponse {
    repeated FsInfo fsInfo = 1;
}

message DeleteFsRequest {
    required string fsName = 1;
}

message DeleteFsResponse {
    required FSStatusCode statusCode = 1;
}


service MdsService {
    rpc ListClusterFsInfo (ListClusterFsInfoRequest) returns (ListClusterFsInfoResponse);
    rpc DeleteFs(DeleteFsRequest) returns (DeleteFsResponse);
}
