//
//  Copyright (c) 2021 NetEase Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: mds.proto

package mds

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FSStatusCode int32

const (
	FSStatusCode_OK                           FSStatusCode = 0
	FSStatusCode_UNKNOWN_ERROR                FSStatusCode = 1
	FSStatusCode_FS_EXIST                     FSStatusCode = 2
	FSStatusCode_NOT_FOUND                    FSStatusCode = 3
	FSStatusCode_PARAM_ERROR                  FSStatusCode = 4
	FSStatusCode_MOUNT_POINT_EXIST            FSStatusCode = 5
	FSStatusCode_MOUNT_POINT_NOT_EXIST        FSStatusCode = 6
	FSStatusCode_RPC_ERROR                    FSStatusCode = 7
	FSStatusCode_INIT_SPACE_ERROR             FSStatusCode = 8
	FSStatusCode_UNINIT_SPACE_ERROR           FSStatusCode = 9
	FSStatusCode_FS_BUSY                      FSStatusCode = 10
	FSStatusCode_INSERT_ROOT_INODE_ERROR      FSStatusCode = 11
	FSStatusCode_UNDER_DELETING               FSStatusCode = 12
	FSStatusCode_NOT_INITED                   FSStatusCode = 13
	FSStatusCode_DELETE_INODE_ERROR           FSStatusCode = 14
	FSStatusCode_METASERVER_CLIENT_NOT_INITED FSStatusCode = 15
	FSStatusCode_FS_ID_MISMATCH               FSStatusCode = 16
	FSStatusCode_SPACE_CLIENT_NOT_INITED      FSStatusCode = 17
	FSStatusCode_INODE_EXIST                  FSStatusCode = 18
	FSStatusCode_INTERNAL_ERROR               FSStatusCode = 19
	FSStatusCode_STORAGE_ERROR                FSStatusCode = 20
	FSStatusCode_ALLOCATE_CHUNKID_ERROR       FSStatusCode = 21
	FSStatusCode_CREATE_PARTITION_ERROR       FSStatusCode = 22
	FSStatusCode_CREATE_COPYSET_ERROR         FSStatusCode = 23
	FSStatusCode_GET_PARTITIONINFOOFFS_ERROR  FSStatusCode = 24
	FSStatusCode_PARTITION_EXIST              FSStatusCode = 25
	FSStatusCode_DELETE_PARTITION_ERROR       FSStatusCode = 26
	FSStatusCode_S3_INFO_ERROR                FSStatusCode = 27
)

// Enum value maps for FSStatusCode.
var (
	FSStatusCode_name = map[int32]string{
		0:  "OK",
		1:  "UNKNOWN_ERROR",
		2:  "FS_EXIST",
		3:  "NOT_FOUND",
		4:  "PARAM_ERROR",
		5:  "MOUNT_POINT_EXIST",
		6:  "MOUNT_POINT_NOT_EXIST",
		7:  "RPC_ERROR",
		8:  "INIT_SPACE_ERROR",
		9:  "UNINIT_SPACE_ERROR",
		10: "FS_BUSY",
		11: "INSERT_ROOT_INODE_ERROR",
		12: "UNDER_DELETING",
		13: "NOT_INITED",
		14: "DELETE_INODE_ERROR",
		15: "METASERVER_CLIENT_NOT_INITED",
		16: "FS_ID_MISMATCH",
		17: "SPACE_CLIENT_NOT_INITED",
		18: "INODE_EXIST",
		19: "INTERNAL_ERROR",
		20: "STORAGE_ERROR",
		21: "ALLOCATE_CHUNKID_ERROR",
		22: "CREATE_PARTITION_ERROR",
		23: "CREATE_COPYSET_ERROR",
		24: "GET_PARTITIONINFOOFFS_ERROR",
		25: "PARTITION_EXIST",
		26: "DELETE_PARTITION_ERROR",
		27: "S3_INFO_ERROR",
	}
	FSStatusCode_value = map[string]int32{
		"OK":                           0,
		"UNKNOWN_ERROR":                1,
		"FS_EXIST":                     2,
		"NOT_FOUND":                    3,
		"PARAM_ERROR":                  4,
		"MOUNT_POINT_EXIST":            5,
		"MOUNT_POINT_NOT_EXIST":        6,
		"RPC_ERROR":                    7,
		"INIT_SPACE_ERROR":             8,
		"UNINIT_SPACE_ERROR":           9,
		"FS_BUSY":                      10,
		"INSERT_ROOT_INODE_ERROR":      11,
		"UNDER_DELETING":               12,
		"NOT_INITED":                   13,
		"DELETE_INODE_ERROR":           14,
		"METASERVER_CLIENT_NOT_INITED": 15,
		"FS_ID_MISMATCH":               16,
		"SPACE_CLIENT_NOT_INITED":      17,
		"INODE_EXIST":                  18,
		"INTERNAL_ERROR":               19,
		"STORAGE_ERROR":                20,
		"ALLOCATE_CHUNKID_ERROR":       21,
		"CREATE_PARTITION_ERROR":       22,
		"CREATE_COPYSET_ERROR":         23,
		"GET_PARTITIONINFOOFFS_ERROR":  24,
		"PARTITION_EXIST":              25,
		"DELETE_PARTITION_ERROR":       26,
		"S3_INFO_ERROR":                27,
	}
)

func (x FSStatusCode) Enum() *FSStatusCode {
	p := new(FSStatusCode)
	*p = x
	return p
}

func (x FSStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FSStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_mds_proto_enumTypes[0].Descriptor()
}

func (FSStatusCode) Type() protoreflect.EnumType {
	return &file_mds_proto_enumTypes[0]
}

func (x FSStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FSStatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FSStatusCode(num)
	return nil
}

// Deprecated: Use FSStatusCode.Descriptor instead.
func (FSStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{0}
}

type FsStatus int32

const (
	FsStatus_NEW      FsStatus = 0
	FsStatus_INITED   FsStatus = 1
	FsStatus_DELETING FsStatus = 2
)

// Enum value maps for FsStatus.
var (
	FsStatus_name = map[int32]string{
		0: "NEW",
		1: "INITED",
		2: "DELETING",
	}
	FsStatus_value = map[string]int32{
		"NEW":      0,
		"INITED":   1,
		"DELETING": 2,
	}
)

func (x FsStatus) Enum() *FsStatus {
	p := new(FsStatus)
	*p = x
	return p
}

func (x FsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mds_proto_enumTypes[1].Descriptor()
}

func (FsStatus) Type() protoreflect.EnumType {
	return &file_mds_proto_enumTypes[1]
}

func (x FsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FsStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FsStatus(num)
	return nil
}

// Deprecated: Use FsStatus.Descriptor instead.
func (FsStatus) EnumDescriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{1}
}

type FSType int32

const (
	FSType_TYPE_VOLUME FSType = 1
	FSType_TYPE_S3     FSType = 2
)

// Enum value maps for FSType.
var (
	FSType_name = map[int32]string{
		1: "TYPE_VOLUME",
		2: "TYPE_S3",
	}
	FSType_value = map[string]int32{
		"TYPE_VOLUME": 1,
		"TYPE_S3":     2,
	}
)

func (x FSType) Enum() *FSType {
	p := new(FSType)
	*p = x
	return p
}

func (x FSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FSType) Descriptor() protoreflect.EnumDescriptor {
	return file_mds_proto_enumTypes[2].Descriptor()
}

func (FSType) Type() protoreflect.EnumType {
	return &file_mds_proto_enumTypes[2]
}

func (x FSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FSType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FSType(num)
	return nil
}

// Deprecated: Use FSType.Descriptor instead.
func (FSType) EnumDescriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{2}
}

// bitmap location for each block group
type BitmapLocation int32

const (
	BitmapLocation_AtStart BitmapLocation = 1
	BitmapLocation_AtEnd   BitmapLocation = 2
)

// Enum value maps for BitmapLocation.
var (
	BitmapLocation_name = map[int32]string{
		1: "AtStart",
		2: "AtEnd",
	}
	BitmapLocation_value = map[string]int32{
		"AtStart": 1,
		"AtEnd":   2,
	}
)

func (x BitmapLocation) Enum() *BitmapLocation {
	p := new(BitmapLocation)
	*p = x
	return p
}

func (x BitmapLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitmapLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_mds_proto_enumTypes[3].Descriptor()
}

func (BitmapLocation) Type() protoreflect.EnumType {
	return &file_mds_proto_enumTypes[3]
}

func (x BitmapLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BitmapLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BitmapLocation(num)
	return nil
}

// Deprecated: Use BitmapLocation.Descriptor instead.
func (BitmapLocation) EnumDescriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{3}
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeSize     *uint64         `protobuf:"varint,1,req,name=volumeSize" json:"volumeSize,omitempty"`
	BlockSize      *uint64         `protobuf:"varint,2,req,name=blockSize" json:"blockSize,omitempty"`
	VolumeName     *string         `protobuf:"bytes,3,req,name=volumeName" json:"volumeName,omitempty"`
	User           *string         `protobuf:"bytes,4,req,name=user" json:"user,omitempty"`
	Password       *string         `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	BlockGroupSize *uint64         `protobuf:"varint,6,req,name=blockGroupSize" json:"blockGroupSize,omitempty"`
	BitmapLocation *BitmapLocation `protobuf:"varint,7,req,name=bitmapLocation,enum=curvefs.mds.BitmapLocation" json:"bitmapLocation,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{0}
}

func (x *Volume) GetVolumeSize() uint64 {
	if x != nil && x.VolumeSize != nil {
		return *x.VolumeSize
	}
	return 0
}

func (x *Volume) GetBlockSize() uint64 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *Volume) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *Volume) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *Volume) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *Volume) GetBlockGroupSize() uint64 {
	if x != nil && x.BlockGroupSize != nil {
		return *x.BlockGroupSize
	}
	return 0
}

func (x *Volume) GetBitmapLocation() BitmapLocation {
	if x != nil && x.BitmapLocation != nil {
		return *x.BitmapLocation
	}
	return BitmapLocation_AtStart
}

type S3Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak         *string `protobuf:"bytes,1,req,name=ak" json:"ak,omitempty"`
	Sk         *string `protobuf:"bytes,2,req,name=sk" json:"sk,omitempty"`
	Endpoint   *string `protobuf:"bytes,3,req,name=endpoint" json:"endpoint,omitempty"`
	Bucketname *string `protobuf:"bytes,4,req,name=bucketname" json:"bucketname,omitempty"`
	BlockSize  *uint64 `protobuf:"varint,5,req,name=blockSize" json:"blockSize,omitempty"`
	ChunkSize  *uint64 `protobuf:"varint,6,req,name=chunkSize" json:"chunkSize,omitempty"`
}

func (x *S3Info) Reset() {
	*x = S3Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Info) ProtoMessage() {}

func (x *S3Info) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Info.ProtoReflect.Descriptor instead.
func (*S3Info) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{1}
}

func (x *S3Info) GetAk() string {
	if x != nil && x.Ak != nil {
		return *x.Ak
	}
	return ""
}

func (x *S3Info) GetSk() string {
	if x != nil && x.Sk != nil {
		return *x.Sk
	}
	return ""
}

func (x *S3Info) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *S3Info) GetBucketname() string {
	if x != nil && x.Bucketname != nil {
		return *x.Bucketname
	}
	return ""
}

func (x *S3Info) GetBlockSize() uint64 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *S3Info) GetChunkSize() uint64 {
	if x != nil && x.ChunkSize != nil {
		return *x.ChunkSize
	}
	return 0
}

type FsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FsDetailOneOf:
	//	*FsDetail_Volume
	//	*FsDetail_S3Info
	FsDetailOneOf isFsDetail_FsDetailOneOf `protobuf_oneof:"FsDetailOneOf"`
}

func (x *FsDetail) Reset() {
	*x = FsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsDetail) ProtoMessage() {}

func (x *FsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsDetail.ProtoReflect.Descriptor instead.
func (*FsDetail) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{2}
}

func (m *FsDetail) GetFsDetailOneOf() isFsDetail_FsDetailOneOf {
	if m != nil {
		return m.FsDetailOneOf
	}
	return nil
}

func (x *FsDetail) GetVolume() *Volume {
	if x, ok := x.GetFsDetailOneOf().(*FsDetail_Volume); ok {
		return x.Volume
	}
	return nil
}

func (x *FsDetail) GetS3Info() *S3Info {
	if x, ok := x.GetFsDetailOneOf().(*FsDetail_S3Info); ok {
		return x.S3Info
	}
	return nil
}

type isFsDetail_FsDetailOneOf interface {
	isFsDetail_FsDetailOneOf()
}

type FsDetail_Volume struct {
	Volume *Volume `protobuf:"bytes,1,opt,name=volume,oneof"`
}

type FsDetail_S3Info struct {
	S3Info *S3Info `protobuf:"bytes,2,opt,name=s3Info,oneof"`
}

func (*FsDetail_Volume) isFsDetail_FsDetailOneOf() {}

func (*FsDetail_S3Info) isFsDetail_FsDetailOneOf() {}

type FsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FsId           *uint32   `protobuf:"varint,1,req,name=fsId" json:"fsId,omitempty"`
	FsName         *string   `protobuf:"bytes,2,req,name=fsName" json:"fsName,omitempty"`
	Status         *FsStatus `protobuf:"varint,3,req,name=status,enum=curvefs.mds.FsStatus" json:"status,omitempty"`
	RootInodeId    *uint64   `protobuf:"varint,4,req,name=rootInodeId" json:"rootInodeId,omitempty"`
	Capacity       *uint64   `protobuf:"varint,5,req,name=capacity" json:"capacity,omitempty"`
	BlockSize      *uint64   `protobuf:"varint,6,req,name=blockSize" json:"blockSize,omitempty"`
	MountNum       *uint32   `protobuf:"varint,7,req,name=mountNum" json:"mountNum,omitempty"`
	Mountpoints    []string  `protobuf:"bytes,8,rep,name=mountpoints" json:"mountpoints,omitempty"`
	FsType         *FSType   `protobuf:"varint,9,req,name=fsType,enum=curvefs.mds.FSType" json:"fsType,omitempty"`
	Detail         *FsDetail `protobuf:"bytes,10,req,name=detail" json:"detail,omitempty"`
	EnableSumInDir *bool     `protobuf:"varint,11,req,name=enableSumInDir" json:"enableSumInDir,omitempty"`
}

func (x *FsInfo) Reset() {
	*x = FsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsInfo) ProtoMessage() {}

func (x *FsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsInfo.ProtoReflect.Descriptor instead.
func (*FsInfo) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{3}
}

func (x *FsInfo) GetFsId() uint32 {
	if x != nil && x.FsId != nil {
		return *x.FsId
	}
	return 0
}

func (x *FsInfo) GetFsName() string {
	if x != nil && x.FsName != nil {
		return *x.FsName
	}
	return ""
}

func (x *FsInfo) GetStatus() FsStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return FsStatus_NEW
}

func (x *FsInfo) GetRootInodeId() uint64 {
	if x != nil && x.RootInodeId != nil {
		return *x.RootInodeId
	}
	return 0
}

func (x *FsInfo) GetCapacity() uint64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *FsInfo) GetBlockSize() uint64 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *FsInfo) GetMountNum() uint32 {
	if x != nil && x.MountNum != nil {
		return *x.MountNum
	}
	return 0
}

func (x *FsInfo) GetMountpoints() []string {
	if x != nil {
		return x.Mountpoints
	}
	return nil
}

func (x *FsInfo) GetFsType() FSType {
	if x != nil && x.FsType != nil {
		return *x.FsType
	}
	return FSType_TYPE_VOLUME
}

func (x *FsInfo) GetDetail() *FsDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *FsInfo) GetEnableSumInDir() bool {
	if x != nil && x.EnableSumInDir != nil {
		return *x.EnableSumInDir
	}
	return false
}

type ListClusterFsInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListClusterFsInfoRequest) Reset() {
	*x = ListClusterFsInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterFsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterFsInfoRequest) ProtoMessage() {}

func (x *ListClusterFsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterFsInfoRequest.ProtoReflect.Descriptor instead.
func (*ListClusterFsInfoRequest) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{4}
}

type ListClusterFsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FsInfo []*FsInfo `protobuf:"bytes,1,rep,name=fsInfo" json:"fsInfo,omitempty"`
}

func (x *ListClusterFsInfoResponse) Reset() {
	*x = ListClusterFsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterFsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterFsInfoResponse) ProtoMessage() {}

func (x *ListClusterFsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterFsInfoResponse.ProtoReflect.Descriptor instead.
func (*ListClusterFsInfoResponse) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{5}
}

func (x *ListClusterFsInfoResponse) GetFsInfo() []*FsInfo {
	if x != nil {
		return x.FsInfo
	}
	return nil
}

type DeleteFsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FsName *string `protobuf:"bytes,1,req,name=fsName" json:"fsName,omitempty"`
}

func (x *DeleteFsRequest) Reset() {
	*x = DeleteFsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFsRequest) ProtoMessage() {}

func (x *DeleteFsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFsRequest.ProtoReflect.Descriptor instead.
func (*DeleteFsRequest) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteFsRequest) GetFsName() string {
	if x != nil && x.FsName != nil {
		return *x.FsName
	}
	return ""
}

type DeleteFsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode *FSStatusCode `protobuf:"varint,1,req,name=statusCode,enum=curvefs.mds.FSStatusCode" json:"statusCode,omitempty"`
}

func (x *DeleteFsResponse) Reset() {
	*x = DeleteFsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFsResponse) ProtoMessage() {}

func (x *DeleteFsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mds_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFsResponse.ProtoReflect.Descriptor instead.
func (*DeleteFsResponse) Descriptor() ([]byte, []int) {
	return file_mds_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFsResponse) GetStatusCode() FSStatusCode {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return FSStatusCode_OK
}

var File_mds_proto protoreflect.FileDescriptor

var file_mds_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x75, 0x72,
	0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0,
	0x01, 0x0a, 0x06, 0x53, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x79, 0x0a, 0x08, 0x46, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x73, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x53, 0x33, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x06, 0x73, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x46,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x22, 0x81, 0x03, 0x0a,
	0x06, 0x46, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x73, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64,
	0x73, 0x2e, 0x46, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x46, 0x53, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x46, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x75, 0x6d, 0x49, 0x6e, 0x44, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x49, 0x6e, 0x44, 0x69, 0x72,
	0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x46, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x66, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x4d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x46, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2a, 0xee, 0x04, 0x0a, 0x0c, 0x46, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x53, 0x5f,
	0x42, 0x55, 0x53, 0x59, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54,
	0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x41, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x50,
	0x59, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x46,
	0x4f, 0x4f, 0x46, 0x46, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x18, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1a, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x33, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x1b, 0x2a, 0x2d, 0x0a, 0x08, 0x46, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x2a, 0x26, 0x0a, 0x06, 0x46, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x33, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x0e, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x74, 0x45, 0x6e, 0x64,
	0x10, 0x02, 0x32, 0xb9, 0x01, 0x0a, 0x0a, 0x4d, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x62, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73,
	0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x73, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2e, 0x6d, 0x64, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10,
	0x5a, 0x0b, 0x63, 0x75, 0x72, 0x76, 0x65, 0x66, 0x73, 0x2f, 0x6d, 0x64, 0x73, 0x80, 0x01, 0x01,
}

var (
	file_mds_proto_rawDescOnce sync.Once
	file_mds_proto_rawDescData = file_mds_proto_rawDesc
)

func file_mds_proto_rawDescGZIP() []byte {
	file_mds_proto_rawDescOnce.Do(func() {
		file_mds_proto_rawDescData = protoimpl.X.CompressGZIP(file_mds_proto_rawDescData)
	})
	return file_mds_proto_rawDescData
}

var file_mds_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mds_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mds_proto_goTypes = []interface{}{
	(FSStatusCode)(0),                 // 0: curvefs.mds.FSStatusCode
	(FsStatus)(0),                     // 1: curvefs.mds.FsStatus
	(FSType)(0),                       // 2: curvefs.mds.FSType
	(BitmapLocation)(0),               // 3: curvefs.mds.BitmapLocation
	(*Volume)(nil),                    // 4: curvefs.mds.Volume
	(*S3Info)(nil),                    // 5: curvefs.mds.S3Info
	(*FsDetail)(nil),                  // 6: curvefs.mds.FsDetail
	(*FsInfo)(nil),                    // 7: curvefs.mds.FsInfo
	(*ListClusterFsInfoRequest)(nil),  // 8: curvefs.mds.ListClusterFsInfoRequest
	(*ListClusterFsInfoResponse)(nil), // 9: curvefs.mds.ListClusterFsInfoResponse
	(*DeleteFsRequest)(nil),           // 10: curvefs.mds.DeleteFsRequest
	(*DeleteFsResponse)(nil),          // 11: curvefs.mds.DeleteFsResponse
}
var file_mds_proto_depIdxs = []int32{
	3,  // 0: curvefs.mds.Volume.bitmapLocation:type_name -> curvefs.mds.BitmapLocation
	4,  // 1: curvefs.mds.FsDetail.volume:type_name -> curvefs.mds.Volume
	5,  // 2: curvefs.mds.FsDetail.s3Info:type_name -> curvefs.mds.S3Info
	1,  // 3: curvefs.mds.FsInfo.status:type_name -> curvefs.mds.FsStatus
	2,  // 4: curvefs.mds.FsInfo.fsType:type_name -> curvefs.mds.FSType
	6,  // 5: curvefs.mds.FsInfo.detail:type_name -> curvefs.mds.FsDetail
	7,  // 6: curvefs.mds.ListClusterFsInfoResponse.fsInfo:type_name -> curvefs.mds.FsInfo
	0,  // 7: curvefs.mds.DeleteFsResponse.statusCode:type_name -> curvefs.mds.FSStatusCode
	8,  // 8: curvefs.mds.MdsService.ListClusterFsInfo:input_type -> curvefs.mds.ListClusterFsInfoRequest
	10, // 9: curvefs.mds.MdsService.DeleteFs:input_type -> curvefs.mds.DeleteFsRequest
	9,  // 10: curvefs.mds.MdsService.ListClusterFsInfo:output_type -> curvefs.mds.ListClusterFsInfoResponse
	11, // 11: curvefs.mds.MdsService.DeleteFs:output_type -> curvefs.mds.DeleteFsResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_mds_proto_init() }
func file_mds_proto_init() {
	if File_mds_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mds_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterFsInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterFsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mds_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FsDetail_Volume)(nil),
		(*FsDetail_S3Info)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mds_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mds_proto_goTypes,
		DependencyIndexes: file_mds_proto_depIdxs,
		EnumInfos:         file_mds_proto_enumTypes,
		MessageInfos:      file_mds_proto_msgTypes,
	}.Build()
	File_mds_proto = out.File
	file_mds_proto_rawDesc = nil
	file_mds_proto_goTypes = nil
	file_mds_proto_depIdxs = nil
}
